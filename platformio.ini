; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description                 = Provide ESP8266 / ESP32 based devices with Web, MQTT and OTA firmware
src_dir                     = tasmota
lib_dir                     = lib/default
boards_dir                  = boards
build_cache_dir             = .cache
extra_configs               = platformio_tasmota32.ini
                              platformio_tasmota_env.ini
                              platformio_tasmota_env32.ini
                              platformio_override.ini
                              platformio_tasmota_cenv.ini
                              platformio_tasmota_core3_env.ini

[common]
platform                    = ${core.platform}
platform_packages           = ${core.platform_packages}
framework                   = arduino
board                       = esp8266_4M2M
board_build.filesystem      = littlefs
board_build.variants_dir    = variants/tasmota
custom_unpack_dir           = unpacked_littlefs
build_unflags               = ${core.build_unflags}
build_flags                 = ${core.build_flags}
monitor_speed               = 115200
monitor_echo                = yes
; monitor_port                = /dev/tty.usbserial-FTVOOY51
; *** Upload Serial reset method for Wemos and NodeMCU
upload_resetmethod          = nodemcu
; upload_port                 = /dev/tty.usbserial-FTVOOY51
upload_port                 = /dev/cu.SLAB_USBtoUART
extra_scripts               = ${scripts_defaults.extra_scripts}
lib_archive                 = no
lib_ldf_mode                = chain
lib_compat_mode             = strict
shared_libdeps_dir          = lib
lib_extra_dirs              =
                              lib/lib_basic
                              lib/lib_i2c
                              lib/lib_display
                              lib/lib_ssl
                              lib/lib_audio
                              lib/lib_rf
                              lib/lib_div

[tasmota]
; Uncomment if you do NOT want gzipped map file(s)
;disable_map_gz = 1
; Uncomment and specify a folder where to place the map file(s) (default set to folder build_output)
;map_dir = /tmp/map_files/
; Uncomment if you do NOT want additionally gzipped firmware file(s) at all
;disable_bin_gz = 1
; Uncomment if you want additionally gzipped esp32x firmware file(s)
;enable_esp32_gz = 1
; Uncomment and specify a folder where to place the firmware file(s) (default set to folder build_output)
;bin_dir = /tmp/bin_files/
; Global build flags (used for all env) can be overriden in "platformio_override.ini"
build_unflags               =
build_flags                 =

[scripts_defaults]
extra_scripts               = pre:pio-tools/pre_source_dir.py
                              pre:pio-tools/set_partition_table.py
                              pre:pio-tools/override_copy.py
                              post:pio-tools/strip-floats.py

[esp_defaults]
extra_scripts               = post:pio-tools/name-firmware.py
                              post:pio-tools/gzip-firmware.py
                              post:pio-tools/metrics-firmware.py
                              post:pio-tools/custom_target.py
;                              post:pio-tools/obj-dump.py
                              ${scripts_defaults.extra_scripts}
; *** remove undesired all warnings
build_unflags               = ${tasmota.build_unflags}
                               -Wall
;                              -mtarget-align
                              -Wdeprecated-declarations
build_flags                 = ${tasmota.build_flags}
                              -DCORE_DEBUG_LEVEL=0
                              -Wl,-Map,firmware.map
                              -Wno-deprecated-declarations
;                              -mno-target-align
                              -mtarget-align
                              -free
                              -fipa-pta
                              -Wreturn-type
                              -DTASMOTA  ; flag indicating that we are compiling Tasmota
; *********************************************************************
; *** Use custom settings from file user_config_override.h
                              -DUSE_CONFIG_OVERRIDE
; *********************************************************************

[esp82xx_defaults]
extra_scripts               = ${esp_defaults.extra_scripts}
build_flags                 = ${esp_defaults.build_flags}
                              -DNDEBUG
                              -DFP_IN_IROM
                              -DBEARSSL_SSL_BASIC
                              ; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
                              -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
                              -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
                              ; -DPIO_FRAMEWORK_ARDUINO_LWIP2_IPV6_HIGHER_BANDWIDTH -DUSE_IPV6 ; enables IPv6
                              ; VTABLES in Flash
                              -DVTABLES_IN_FLASH
                              ; remove the 4-bytes alignment for PSTR()
                              -DPSTR_ALIGN=1
                              ; restrict to minimal mime-types
                              -DMIMETYPE_MINIMAL
                              ; uncomment the following to enable TLS with 4096 RSA certificates
                              ;-DUSE_4K_RSA
lib_ignore                  =
                              Servo(esp8266)
                              ESP8266AVRISP
                              ESP8266LLMNR
                              ESP8266NetBIOS
                              ESP8266SSDP
                              SP8266WiFiMesh
                              Ethernet(esp8266)
                              GDBStub
                              TFT_Touch_Shield_V2
                              ESP8266HTTPUpdateServer
                              ESP8266WiFiMesh
                              EspSoftwareSerial
                              SPISlave
                              Hash
; Disable next if you want to use ArduinoOTA in Tasmota (default disabled)
                              ArduinoOTA

[core]
; *** Esp8266 Tasmota modified Arduino core based on core 2.7.4. Added Backport for PWM selection
platform                    = https://github.com/tasmota/platform-espressif8266/releases/download/2024.01.01/platform-espressif8266.zip
platform_packages           =
build_unflags               = ${esp_defaults.build_unflags}
build_flags                 = ${esp82xx_defaults.build_flags}
; *** Use ONE of the two PWM variants. Tasmota default is Locked PWM
                              ;-DWAVEFORM_LOCKED_PHASE
                              -DWAVEFORM_LOCKED_PWM

[esp32_defaults]
build_unflags = ${esp_defaults.build_unflags}
	-Wswitch-unreachable
	-Wstringop-overflow
	-Wincompatible-pointer-types
	-Wnonnull-compare
	-fexceptions
	-Wpointer-arith
build_flags = ${esp_defaults.build_flags}
	-Wno-switch-unreachable
	-Wno-stringop-overflow
	-fno-exceptions
	-DBUFFER_LENGTH=128
	-DHTTP_UPLOAD_BUFLEN=2048
	-DMQTT_MAX_PACKET_SIZE=1200
	-Duint32=uint32_t
	-Duint16=uint16_t
	-Duint8=uint8_t
	-Dsint8_t=int8_t
	-Dsint32_t=int32_t
	-Dsint16_t=int16_t
	-Dmemcpy_P=memcpy
	-Dmemcmp_P=memcmp
	-DUSE_4K_RSA
	-I$PROJECT_DIR/include
	-include "sdkconfig.h"
	-include "esp32x_fixes.h"
	-Wl,--wrap=panicHandler -Wl,--wrap=xt_unhandled_exception

[core32]
platform = https://github.com/tasmota/platform-espressif32/releases/download/v3.4.0/Tasmota-platform-espressif32.zip
platform_packages =
build_unflags = ${esp32_defaults.build_unflags}
build_flags = ${esp32_defaults.build_flags}

[core32solo1]
platform = https://github.com/tasmota/platform-espressif32/releases/download/v3.4.0/Tasmota-platform-espressif32.zip
platform_packages = framework-arduinoespressif32 @ https://github.com/tasmota/arduino-esp32/releases/download/2.0.1.1/framework-arduinoespressif32-solo1-release_IDF4.4.tar.gz
build_unflags = ${esp32_defaults.build_unflags}
build_flags = ${esp32_defaults.build_flags}

[env]
platform = ${common.platform}
platform_packages = ${common.platform_packages}
framework = ${common.framework}
board = ${common.board}
board_build.filesystem = ${common.board_build.filesystem}
build_unflags = ${common.build_unflags}
build_flags = ${common.build_flags}
monitor_speed = ${common.monitor_speed}
upload_port = ${common.upload_port}
upload_resetmethod = ${common.upload_resetmethod}
extra_scripts = ${scripts_defaults.extra_scripts}
lib_ldf_mode = ${common.lib_ldf_mode}
lib_compat_mode = ${common.lib_compat_mode}
lib_extra_dirs = ${library.lib_extra_dirs}
lib_ignore =
	Servo(esp8266)
	ESP8266AVRISP
	ESP8266LLMNR
	ESP8266NetBIOS
	ESP8266SSDP
	SP8266WiFiMesh
	Ethernet(esp8266)
	GDBStub
	TFT_Touch_Shield_V2
	ESP8266HTTPUpdateServer
	ESP8266WiFiMesh
	EspSoftwareSerial
	SPISlave
	Hash
	ArduinoOTA

[env:tasmota]
lib_deps = h2zero/NimBLE-Arduino@^1.3.1
; build_flags = ${env.build_flags} -DUSE_UFILESYS

[env:tasmota-minimal]
build_flags = ${env.build_flags} -DFIRMWARE_MINIMAL
lib_extra_dirs =
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-lite]
build_flags = ${env.build_flags} -DFIRMWARE_LITE
lib_extra_dirs =
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-knx]
build_flags = ${env.build_flags} -DFIRMWARE_KNX_NO_EMULATION
lib_extra_dirs = lib/lib_basic, lib/lib_div
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-sensors]
build_flags = ${env.build_flags} -DFIRMWARE_SENSORS
lib_extra_dirs = lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-display]
build_flags = ${env.build_flags} -DFIRMWARE_DISPLAYS
lib_extra_dirs = lib/lib_basic, lib/lib_display
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-ir]
build_flags = ${env.build_flags} -DFIRMWARE_IR
lib_extra_dirs = lib/lib_basic
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-zbbridge]
build_flags = ${env.build_flags} -DFIRMWARE_ZBBRIDGE
board = esp8266_zbbridge
lib_extra_dirs = lib/lib_basic, lib/lib_ssl, lib/lib_div
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-zigbee]
build_flags = ${env.build_flags} -DUSE_ZIGBEE -DUSE_CCLOADER -DUSE_UFILESYS
board = esp8266_4M2M
board_build.f_cpu = 160000000L
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-AF]
build_flags = ${env.build_flags} -DMY_LANGUAGE=af_AF
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-BG]
build_flags = ${env.build_flags} -DMY_LANGUAGE=bg_BG
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-BR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=pt_BR
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-CN]
build_flags = ${env.build_flags} -DMY_LANGUAGE=zh_CN
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-CZ]
build_flags = ${env.build_flags} -DMY_LANGUAGE=cs_CZ
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-DE]
build_flags = ${env.build_flags} -DMY_LANGUAGE=de_DE
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-ES]
build_flags = ${env.build_flags} -DMY_LANGUAGE=es_ES
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-FR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=fr_FR
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-FY]
build_flags = ${env.build_flags} -DMY_LANGUAGE=fy_NL
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-GR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=el_GR
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-HE]
build_flags = ${env.build_flags} -DMY_LANGUAGE=he_HE
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-HU]
build_flags = ${env.build_flags} -DMY_LANGUAGE=hu_HU
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-IT]
build_flags = ${env.build_flags} -DMY_LANGUAGE=it_IT
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-KO]
build_flags = ${env.build_flags} -DMY_LANGUAGE=ko_KO
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-NL]
build_flags = ${env.build_flags} -DMY_LANGUAGE=nl_NL
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-PL]
build_flags = ${env.build_flags} -DMY_LANGUAGE=pl_PL
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-PT]
build_flags = ${env.build_flags} -DMY_LANGUAGE=pt_PT
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-RO]
build_flags = ${env.build_flags} -DMY_LANGUAGE=ro_RO
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-RU]
build_flags = ${env.build_flags} -DMY_LANGUAGE=ru_RU
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-SE]
build_flags = ${env.build_flags} -DMY_LANGUAGE=sv_SE
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-SK]
build_flags = ${env.build_flags} -DMY_LANGUAGE=sk_SK
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-TR]
build_flags = ${env.build_flags} -DMY_LANGUAGE=tr_TR
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-TW]
build_flags = ${env.build_flags} -DMY_LANGUAGE=zh_TW
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-UK]
build_flags = ${env.build_flags} -DMY_LANGUAGE=uk_UA
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-VN]
build_flags = ${env.build_flags} -DMY_LANGUAGE=vi_VN
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32_base]
framework = ${common.framework}
platform = ${core32.platform}
platform_packages = ${core32.platform_packages}
board_build.filesystem = ${common.board_build.filesystem}
custom_unpack_dir = ${common.custom_unpack_dir}
board = esp32_4M
monitor_speed = 115200
; upload_port = COM4
; upload_port = /dev/tty.usbserial-FTVOOY51
upload_resetmethod = ${common.upload_resetmethod}
extra_scripts = ${common.extra_scripts}
build_unflags = ${esp32_defaults.build_unflags}
build_flags = ${esp32_defaults.build_flags}
lib_ldf_mode = ${common.lib_ldf_mode}
lib_compat_mode = ${common.lib_compat_mode}
lib_extra_dirs = ${library.lib_extra_dirs}
	lib/libesp32
	lib/libesp32_lvgl
lib_ignore =
	ESP32 Azure IoT Arduino
	ESP32 Async UDP
	ESP32 BLE Arduino
	NetBIOS
	ESP32
	Preferences
	BluetoothSerial
	ArduinoOTA
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32_8M]
extends = env:tasmota32_base
board = esp32_8M
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32_16M]
extends = env:tasmota32_base
board = esp32_16M
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32solo1]
extends = env:tasmota32_base
platform_packages = ${core32solo1.platform_packages}
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-webcam]
extends = env:tasmota32_base
board = esp32-cam
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_WEBCAM
lib_extra_dirs = lib/libesp32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-odroidgo]
extends = env:tasmota32_base
board = esp32-odroid
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_ODROID_GO -DUSE_UNIVERSAL_DISPLAY -DUSE_AUTOCONF
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-core2]
extends = env:tasmota32_base
board = esp32-m5core2
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_M5STACK_CORE2 -DUSE_UNIVERSAL_DISPLAY -DUSE_AUTOCONF
lib_extra_dirs = lib/libesp32, lib/libesp32_lvgl, lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div, lib/lib_ssl, lib/lib_display, lib/lib_audio
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-bluetooth]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_BLUETOOTH
lib_extra_dirs = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_ssl
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-display]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_DISPLAYS
lib_extra_dirs = lib/libesp32, lib/lib_basic, lib/lib_display
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-lvgl]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_LVGL -DUSE_AUTOCONF
board_build.f_cpu = 160000000L
lib_extra_dirs = lib/libesp32, lib/libesp32_lvgl, lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div, lib/lib_ssl, lib/lib_display
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-ir]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DUSE_IR_REMOTE_FULL -DFIRMWARE_IR
lib_extra_dirs = lib/libesp32, lib/lib_basic
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32c3]
extends = env:tasmota32_base
board = esp32c3
build_unflags = ${env:tasmota32_base.build_unflags}
	-mtarget-align
build_flags = ${env:tasmota32_base.build_flags} -DFIRMWARE_TASMOTA32
lib_ignore =
	ESP8266Audio
	ESP8266SAM
	TTGO TWatch Library
	Micro-RTSP
	epdiy
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-AF]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=af_AF -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-BG]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=bg_BG -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-BR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=pt_BR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-CN]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=zh_CN -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-CZ]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=cs_CZ -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-DE]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=de_DE -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-ES]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=es_ES -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-FR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=fr_FR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-FY]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=fy_NL -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-GR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=el_GR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-HE]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=he_HE -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-HU]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=hu_HU -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-IT]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=it_IT -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-KO]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=ko_KO -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-NL]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=nl_NL -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-PL]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=pl_PL -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-PT]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=pt_PT -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-RO]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=ro_RO -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-RU]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=ru_RU -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-SE]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=sv_SE -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-SK]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=sk_SK -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-TR]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=tr_TR -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-TW]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=zh_TW -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-UK]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=uk_UA -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-VN]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags} -DMY_LANGUAGE=vi_VN -DFIRMWARE_TASMOTA32
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[library]
shared_libdeps_dir = lib
lib_extra_dirs =
	lib/lib_basic
	lib/lib_i2c
	lib/lib_display
	lib/lib_ssl
	lib/lib_audio
	lib/lib_rf
	lib/lib_div

[env:tasmota32s2]
extends = env:tasmota32_base
board = esp32s2
build_flags = ${env:tasmota32_base.build_flags} -D FIRMWARE_TASMOTA32
lib_ignore =
	ESP8266Audio
	ESP8266SAM
	TTGO TWatch Library
	NimBLE-Arduino
	epdiy
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-rangeextender]
build_flags = ${env.build_flags}
	-D FIRMWARE_RANGE_EXTENDER
	-D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH
	-D USE_WIFI_RANGE_EXTENDER
	-D USE_WIFI_RANGE_EXTENDER_NAPT
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-rangeextender]
extends = env:tasmota32_base
build_flags = ${env:tasmota32_base.build_flags}
	-D FIRMWARE_TASMOTA32
	-D USE_WIFI_RANGE_EXTENDER
	-D USE_WIFI_RANGE_EXTENDER_NAPT
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota-debug]
build_type = debug
build_unflags = ${env.build_unflags}
build_flags = ${env.build_flags}
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-debug]
extends = env:tasmota32_base
build_type = debug
build_unflags = ${env:tasmota32_base.build_unflags}
build_flags = ${env:tasmota32_base.build_flags}
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32-ocd]
extends = env:tasmota32_base
debug_tool = esp-prog
upload_protocol = esp-prog
debug_init_break = tbreak setup
build_unflags = ${env:tasmota32_base.build_unflags}
build_flags = ${env:tasmota32_base.build_flags}
lib_deps = h2zero/NimBLE-Arduino@^1.3.1

[env:tasmota32solo1-ocd]
extends = env:tasmota32_base
platform_packages = ${core32solo1.platform_packages}
board = esp32_solo1_4M
debug_tool = esp-prog
upload_protocol = esp-prog
debug_init_break = tbreak setup
build_unflags = ${env:tasmota32_base.build_unflags}
build_flags = ${env:tasmota32_base.build_flags}
lib_deps = h2zero/NimBLE-Arduino@^1.3.1
